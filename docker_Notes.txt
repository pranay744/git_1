
sudo sed -i 's/mirrorlist/#mirrorlist/g' /etc/yum.repos.d/CentOS-*
sudo sed -i 's|#baseurl=http://mirror.centos.org|baseurl=http://vault.centos.org|g' /etc/yum.repos.d/CentOS-*
sudo yum update -y

Interveiw Questions:
====================
where the docker information available 			--> /var/lib/docker
where the docker layers are stored				-->/var/lib/overlay2
what are the image information will store		--> /var/lib/docker/image
how can we see the layers of the image			-->cmd: docker history <image name>
what will happen if you remove the image of running continer 	--> We will not be able to delete running continer image. 
																but we can use -f(force) and delete it, but in this case, 
																we will be able to delete only references of the Image. 
What is Dangling Image:							--> An image which is does not have any repository name and tag called Dangling image
What is Registry								--> Collection of Repositories
What is Repository								--> Collection of different versions of Docker Images
diff betw docker create and docker run 			--> Docker create will only create a continer but not start the continer
												--> Docker run will create the Continer and run the Container
Diff betw docker stop and docker kill			--> Using stop, we can stop and start the continer, but when we use kill, we never start the continer
What is the main important points to be considered while deploying applications as a continers?
												--> 

How to troubleshoot your application which is running in Continer:
==================================================================
docker top <Continer ID>					--> This will print all process running inside the continer. 
docker run --memory 
docker logs <ContinerID/Name> 				--> Display our continer/application logs
docker logs -f <ContinerID/Name> --tail 10	--> Display the continer last 100 logs  
Can we run multiple process(Java/DB/) inside the continer? --> Techincall we could not not perferable. 










==================================================Docker=================================================

docker pull <Image name>					--> Pull the images from the remote repository into docker host
docker images								--> Display the list of images downloaded in the Linux Box.
docker -f dangling=true						--> Display the images which does not have references  
docker ps									--> Display the list of running containers
docker ps -a 								--> Display the list of running and stopped containers. 
dokcer ps -aq								--> This will disply running continer ID's only
docker start 								--> This cmd helps us to start the Docker container
dokcer stop									--> This cmd helps us to stop the Docker Container
docker attach								--> attach the terminal to the running images but the terminal will terminage if you exit
docker exec -it <continer ID> /bin/bash 	--> This Cmd will attach to the terminal and never terminated the session if you exit
docker exec -it -u pranay <cotiner ID> /bin/bash--> This cmd will login with the continer with user pranay
docker exec <continer name> ls 				--> This will display the current working dir for the continer 
docker exec <continer name> ls /webapps/	--> This will display list the files under /webapps/
docker exit									--> This Cmd will first stop the containers and then exist from image containers
control + pq								--> This cmd will simply exit from the container terminal with out stop the container
docker rm <container ID> 					--> This will delete the stopped continer but not running continer 
docker rm -f <container ID>					--> This will delete the continer even if it is running. 
docker rmi <image name or continer id>		--> to remove image
docker stop $(docker ps -a)					--> Stop all running Container 
docker top <Continer ID>					--> This will print the processed from the continer 
docker save -o <imagename>.tar	#zip it		--> This will save the image with .tar format and copy to any other host using SCP 
											    cmd wihtout pusing into repository
docker load -i <imagename>.tar	#unzip it	--> once you copied into the remote host, to unzip the image. 

docker continer prune 						--> To cleanup the continer
docker network prune						--> Delete all custome networks if any
docker network volume						-->  Remove all unused local volumes
docker image prune							--> This will remove all dangling images 
docker system prune							--> To cleanup the system
	WARNING! This will remove:
  - all stopped containers
  - all networks not used by at least one container
  - all dangling images
  - all dangling build cache
Are you sure you want to continue? [y/N]

docker info									--> This will display the configuration details about docker host
docker inspect <continerID>					--> This will display the continer configuration details. 
docker logs <continerid>					--> Display the information where ever we executed in this continer. 
docker history <continer ID>				--> Display the past image history 
docker restart <Continer ID>				--> Restart the Continer 
docker pause <Container ID>					--> Pause the Continer 
docker unpause <continer ID>				--> unpassed the passed continer 
docker rename <name of the continer> name 	--> change the continer name when the continer is running 
docker run -itd --name UbuntuOS <image name>--> This will create a new continer with the UbuntuOS 

docker cp <sourcefile> <Container/Name:/DestinationPath> --> Copy the file from local PC to the Docker image
docker cp <Container/Name:/sourcefile> <DestinationPath> --> Copy the file from Continer to Docker host
docker run --entrypoint useadd Dockerfile <username>valaxy --> this will add the user valaxy for the continer even if you have a Multiple ENTRYPOINT'S
															   in the Docker file. 

===============================================================================================================
docker commit								--> Create a new image with existing container id.
docker tag <Image id> "tag name"			--> Create a Name for the Image. 
===============================================================================================================
docker run -itd -v hostpath:contpath <Imagename>--> In this case Host and continer images are tightly coupled and shared the data, if any changes 
													were happend at any end, the same will be reflectred both the end. 
docker run -itd -volumes-from <continerid> <imagename> --> In this case Host, continer 1 and continer 2 are tightly coupled and shared the data, 
															if any changes were happend at any end, the same will be reflectred both the end.
===============================================================================================================

==================
Port configuration 
=================
docker run -itd --name Tomcat -p 82:80 httpd --> Run the docker tomcat continer with 82 port in detached mode 

docker stats <continer id> 					--> this will display the load of the continer. 
	CONTAINER ID   NAME              CPU %     MEM USAGE / LIMIT     MEM %     NET I/O          BLOCK I/O   PIDS
	6b83587ce61c   determined_bohr   0.01%     40.08MiB / 3.781GiB   1.04%     7.9kB / 5.08kB   0B / 0B     110
	
docker run -itd -m 500m <Continer ID> 		-- This will allocate the specific memory to the continer 
docker events 								--> This will display the continer logs in run time 
docker -f events=start						--> This will filter the logs for start cmd 
=================================================================================================================
Networking
==================================
docker network list							--> This will display the existing network 
			NETWORK ID     NAME      DRIVER    SCOPE
			227654afe8bc   bridge    bridge    local
			7703bab53b62   host      host      local
			ff90529997f8   none      null      local

docker inspect <network ID> 				--> This will display the Network ID details 

HOW TO CREATE YOUR OWN NETWORKING
=================================
docker network create --subnet 10.1.0.0/24 --gateway 10.1.0.1 TestNetwork
docker network create --subnet 10.1.0.0/24 --gateway 10.1.0.1 --ip-range 10.1.5.0/24 --driver bridge --label test-network
docker network rm <network id>							--> Delete the created network

How to run the Continer in the specific network:-
=================================================
docker run -it --net <network name> wordpress		--> this will run the continer in the specific network
docker run -it --net <netowrk name> --IP 10.0.1.1 workdpress --> this will create a continer in the specific network with specific IP address

How to build Continer:-
=======================
docker build -t pranay744/webapplication2:2 <docker file path>		--> This will create a new image from Docker file 
docker build -t pranay744/webapplication2:2 <docker file path>  --no-cache --> In this case, If you already downloaded
																			 the image, in next time it would not use
																		     the any cache to download the image
docker build -f Dockerfile_ENV -t newImage .						--> If you want to build the docker image with the specific name otherthan
																		Docker file.
how to link the wordpress and mysql:-
=======================================
First run the Mysql:
docker run -itd --name mydb -e MYSQL_ROOT_PASSWORD=12345 mysql
then link the wordpress to mysql db
docker run -itd -p 83:80 --link <name of the container>:<image of the container> workdpress 



==================================================================================================================
											DOCKER FILE
==================================================================================================================
Interview Questions:
+++++++++++++++++++++
Can we have more FROM instructions in Docker file?		--> Yes we can have.
what is the diff btw COPY and docker cp 				--> COPY is using in the docke file while creating Docker image and docker cp is using for 
															copying the files from docker host to the docker conitner vise versa. 
what is Diff btw ADD and COPY							--> Add can copy local files and also it can download the files from remotehost. 
															But with COPY, copy can be used to copy the files from local to the docker image
what is Diff btw RUN and Cmd							--> Using RUN we can executes commands on top of base image, RUN Command will execute while 
															creating a Image. CMD will execute instruction/command while creating a continer.
What is Diff btw ENTRYPOINT and Cmd						--> CMD instructions can be overridden( can be changed) while creating a continer. where as 
															ENTRYPOINT can't be overridden.
which one will execute first, CMD from image or Runtime --> always from the Runtime 
When you pass the parameters in runtime for ENTRYPOINT that will take it as argument. for instance 
		EX ENTRYPOINT ["echo","WELCOME TO THE DOCKER"]
		docker build -t imagename Dockerfile ls
		Output: WELCOME TO THE DOCKER ls
		
Can we have CMD and ENTRYPOINT together. 				--> Yes we can have but ENTRYPOINT will execute first and then CMD, even if you defined CMD 
															first.
			usecase:
					CMD ['START']
					ENTRYPOINT ['sh','catalina.sh']
					Output execution:
						sh catalina.sh start

what is the Diff btw ENV and ARG						-->
What is shell form and executable form in Docker?
RUN, CMD, ENTRYPOINT instructions can be defined in shell form or excutable form 

Shell Form: In this case, the process will execute as a Child Process becasue the CMD's will be executed under /bin/bash
===========
RUN <CMD> <ARGS>
CMD <CMD> <ARGS>
ENTRYPOINT <CMD> <ARGS>
Ex:-
RUN mkdir -p /usr/test
/bin/bash -c mkdir -p /usr/test
CMD java -jar app.jar
/bin/bash -c java -jar app.jar
ENTRYPOINT java -jar app.jar
/bin/bash -c java -jar app.jar

Executable Form:In this case, the process will execute as a parent Process becasue the CMD's will be executed directly under /bin/
================
RUN ["mkdir","-p","/var/test"]
/bin/mkdir -p /var/test
CMD ["mkdir","-p","/var/test"]
/bin/mkdir -p /var/test
CMD ["sh","test.sh"]
/bin/sh test.sh 
ENTRYPOINT ["mkdir","-p","/var/test"]

What are the Best Practices that we need to follow while creating Docker Images:
1> Developer should not hard code the configurations( Environment Specific Details
like DB Username, Password, ..etc) in the code
2> We have externilize the configuration while  

What is State less and state full application:
The applicaiton which as a Backup for the applicaiton is called state full application. In Docker using Volumes we can make the application state full. 

What is readonly volumes, how can we can attach volumes as readonly ?
Continers has only read only data not able to write the data. 
	EX: docker run -d --name mongo -e MONGO_INITDB_ROOT_USERNAME=devdb -e MONGO_INITDB_ROOT_PASSWORD=devdb@123 -v mongodbebsvol:/data/db:ro --network springappnetwork mongo

Docker DSl(Domain Specific Language) keywords in Docker:-
===============================================================
FROM
MAINTAINER


====================================================
COPY		<source><Destination>		--> Is used to copy files/folder to image while creating an image.
			target/maven-web-app.war /usr/local/tomcat/webapps/maven-web-app.war
		COPY .(current working directory of image in local pc) .(current working directory in the image)

ADD										-->ADD also copy files to image. ADD can copy local files and also it can download files
										  from remote http(s)locations while creating an images. If we are adding or downloading tar files(*.tar) 
										  it will add also it will extract that file in image.
										  Syntax: <sourcefilepath> <destination>

====================================================
RUN										--> Using RUN we can executes linux command on top of base image. RUN instructions will be executed while creating
											an image. We can have N Number of RUN instructions in docker file. All these instructions will be 
											executed from top to bottom. 
												executing while creating image.  
												Ex: RUN mkdir /usr/, RUN yum install java 										  
CMD										-->Using CMD we can execute commands. CMD instruction/command will be executed while creating a continer
								 we can have more than one CMD instruction in docker file. Docker will Process/execute only one CMD(Recent/Last CMD).
										--> CMD can be used to start the process (Applicatoin) inside continer while creating a continer. 
										--> CMD instructions can be overridden while creating a continer.
										
ENTRYPOINT								--> ENTRYPOINT instruction also will be executed while creating a continer. we can set an entry point (Command0
											for our continer which we want to execute. Where as ENTRYPOINT instructions can NOT be overridden while
											creating a continer. We can have more than one ENTRYPOINT instruction in docker file.
========================================================================================================
ENV										--> We can set Environment varaibles using ENV. These varabiles can be accessable in image(while creating image)
											and also we can access in container. 
										Syntax: ENV CATALINA_HOME /usr/local/tomcat/
ARG 									--> Is like a variable which we can define and refer in docker file run time(while creating an image)
										 also we can pass arugumetns. ARG can be accessable only while creating an image. we cannot  refer/access in 
										 the continer.
										 --> We can pass N number of Aarguments which creating an image
										docker build -t imagename --build-arg branch=developer
=====================================================================================================
USER 									--> We can set a USER for a continer or a image, The Instructions will be executed as whatever user we have
											set using USER. By default the continer will start with ROOT.
=====================================================================================================
LABEL									--> We can add a label to the Image. Labels are key value paris which we can add to the image.
										--> We can give N number of LABLES to our images.
======================================================================================
EXPOSE									--> Expose the port 8585 ( port forwarding)
======================================================================================
WORKDIR									--> Using this we can set a working directory for an image/container. It's like cd in Linux
										Syntax: WORKDIR <Dirpath>
										
VOLUME 									--> Create a Mount point in a continer.

==========================================================================================
									Volumes
==========================================================================================
There are 3 types of Volumes:-
	1> Local Volumes
		a> Bind Mode
			Bind mode mean, 
				docker run -itd -v hostpath:contpath <Imagename>--> In this case Host and continer images are tightly coupled and shared the data, if any changes 
													were happend at any end, the same will be reflectred both the end. 
		b> Persistance VOLUME
			Persistance Volume means, create a Volume using below cmd and attach to the continers
			docker volume create volume1
			docker run -itd --volume volume1 -p 8585:8080 --name Tomcat
	2> External Volumes(Network Volumes)
			AWS EBS are the External Volumes, 
				docker plugin install rexray/ebs EBS_ACCESSKEY= EBS_SECRETKEY= /
				docker plugin ls
			Now create a volume 
				docker volume create -d rexray/ebs mongodbebsvol.
					Using above cmd, we can create a Volume in AWS cloud and use for Continer
				dokcer volume ls
				
				
================================================================================================================================
										Docker Compose
=================================================================================================================================
What is Docker file and Docker Compose?
	Docker file is using for docker images, Docker Compose is used for create a multi/single continer applications. 

Docker Compose is a tool using which we can define & deploy multi/single continer applicaitons. 
It's a YAML File 

VERSION:
SERVICES:
VOLUMES:
NETWORKS:




